var vows   = require('vows')
  , assert = require('assert');

var named = require('./index');

vows.describe('Function Test').addBatch({
  'A function with no named arguments': {
    topic: function () {
      return named(function () {
        return arguments;
      });
    },

    'when called with no arguments': {
      topic: function (func) {
        return func();
      },

      'actually receives no arguments': function (args) {
        assert.equal(args.length, 0, error(args));
      }
    },

    'when called with one argument': {
      topic: function (func) {
        return func({ test: 1 });
      },

      'actually receives no arguments': function (args) {
        assert.equal(args.length, 0, error(args));
      }
    }
  },

  'A function with one named argument': {
    topic: function () {
      return named(function (test1) {
        return arguments;
      });
    },

    'when called with no arguments': {
      topic: function (func) {
        return func();
      },

      'actually receives 1 argument': function (args) {
         assert.equal(args.length, 1, error(args));
      },

      'receives a single undefined argument': function (args) {
         assert.equal(args[0], undefined, error(args));
      }
    },

    'when called with one argument': {
      topic: function (func) {
        return func({ test1: 1 });
      },

      'actually receives 1 argument': function (args) {
        assert.equal(args.length, 1, error(args));
      },

      'receives the correct argument': function (args) {
        assert.equal(args[0], 1, error(args));
      }
    }
  },

  'A function with two named arguments': {
    topic: function () {
      return named(function (test1, test2) {
        return arguments;
      });
    },

    'when called with no arguments': {
      topic: function (func) {
        return func();
      },

      'actually receives 2 arguments': function (args) {
         assert.equal(args.length, 2, error(args));
      },

      'receives two undefined arguments': function (args) {
         assert.equal(args[0], undefined, error(args));
         assert.equal(args[1], undefined, error(args));
      }
    },

    'when called with one argument': {
      topic: function (func) {
        return func({ test1: 1 });
      },

      'actually receives 2 arguments': function (args) {
        assert.equal(args.length, 2, error(args));
      },

      'receives one real and one undefined argument': function (args) {
        assert.equal(args[0], 1, error(args));
        assert.equal(args[1], undefined, error(args));
      }
    },

    'when called with two arguments': {
      topic: function (func) {
        return func({ test1: 1, test2: 2 });
      },

      'actually receives 2 arguments': function (args) {
        assert.equal(args.length, 2, error(args));
      },

      'receives the correct arguments': function (args) {
        assert.equal(args[0], 1, error(args));
        assert.equal(args[1], 2, error(args));
      }
    }
  }
}).export(module);

function error (args) {
  return 'Received arguments: ' + args.toString();
}
